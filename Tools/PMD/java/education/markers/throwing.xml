<?xml version="1.0"?>

<ruleset name="Throwing"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
	<description>
This ruleset checks for mistakes such as throwing Exception or raw exceptions, and throwing exceptions from the finally block.
	</description>
	<rule name="SignatureDeclareThrowsException"
   		since="1.2"
         message="A method/constructor shouldn't explicitly throw java.lang.Exception"
          class="net.sourceforge.pmd.lang.java.rule.strictexception.SignatureDeclareThrowsExceptionRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strictexception.html#SignatureDeclareThrowsException">
		<description>
Methods that declare the generic Exception as a possible throwable are not very helpful since their
failure modes are unclear. Use a class derived from RuntimeException or a more specific checked exception.
		</description>
		<priority>8</priority>
		<example>
			<![CDATA[
public void foo() throws Exception {
}
                ]]>
		</example>
	</rule>

	<rule name="AvoidThrowingRawExceptionTypes"
   		language="java"
      since="1.8"
      message="Avoid throwing raw exception types."
      class="net.sourceforge.pmd.lang.rule.XPathRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strictexception.html#AvoidThrowingRawExceptionTypes">
		<description>
Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable,
Exception, or Error, use a subclassed exception or error instead.
		</description>
		<priority>8</priority>
		<properties>
			<property name="xpath">
				<value>
					<![CDATA[
//AllocationExpression
 /ClassOrInterfaceType[
 (@Image='Throwable' and count(//ImportDeclaration/Name[ends-with(@Image,'Throwable')]) = 0)
or
 (@Image='Exception' and count(//ImportDeclaration/Name[ends-with(@Image,'Exception')]) = 0)
or
 (@Image='Error'  and count(//ImportDeclaration/Name[ends-with(@Image,'Error')]) = 0)
or
( @Image='RuntimeException'  and count(//ImportDeclaration/Name[ends-with(@Image,'RuntimeException')]) = 0)
]
 ]]>
				</value>
			</property>
		</properties>
		<example>
			<![CDATA[
public class Foo {
  public void bar() throws Exception {
    throw new Exception();
   }
}
]]>
		</example>
	</rule>

	<rule name="AvoidThrowingNullPointerException"
   		language="java"
    	  since="1.8"
        message="Avoid throwing null pointer exceptions."
        class="net.sourceforge.pmd.lang.rule.XPathRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strictexception.html#AvoidThrowingNullPointerException">
		<description>
Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the
virtual machine threw it. Consider using an IllegalArgumentException instead; this will be
clearly seen as a programmer-initiated exception.
		</description>
		<priority>8</priority>
		<properties>
			<property name="xpath">
				<value>
					<![CDATA[
//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']
   ]]>
				</value>
			</property>
		</properties>
		<example>
			<![CDATA[
public class Foo {
  void bar() {
    throw new NullPointerException();
  }
}
  ]]>
		</example>
	</rule>

	<rule name="AvoidRethrowingException"
   		language="java"
    since="3.8"
    message="A catch statement that catches an exception only to rethrow it should be avoided."
    class="net.sourceforge.pmd.lang.rule.XPathRule"
    externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strictexception.html#AvoidRethrowingException">
		<description>
Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.
		</description>
		<priority>6</priority>
		<properties>
			<property name="xpath">
				<value>
					<![CDATA[
//CatchStatement[FormalParameter
 /VariableDeclaratorId/@Image = Block/BlockStatement/Statement
 /ThrowStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0]/PrimaryPrefix/Name/@Image
 and count(Block/BlockStatement/Statement) =1]
 ]]>
				</value>
			</property>
		</properties>
		<example>  <![CDATA[
public void bar() {
    try {
    // do something
    }  catch (SomeException se) {
       throw se;
    }
}
  ]]>
		</example>
	</rule>

	<rule	name="DoNotThrowExceptionInFinally"
   		language="java"
	       since="4.2"
		    message="A throw statement in a finally block makes the control flow hard to understand."
		    class="net.sourceforge.pmd.lang.rule.XPathRule"
		    externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strictexception.html#DoNotThrowExceptionInFinally">
		<description>
			<![CDATA[
Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions 
or code defects.
Note: This is a PMD implementation of the Lint4j rule "A throw in a finally block"
			]]>
		</description>
		<priority>7</priority>
		<properties>
			<property name="xpath">
				<value>
					<![CDATA[
//FinallyStatement[descendant::ThrowStatement]
			          ]]>
				</value>
			</property>
		</properties>
		<example>
			<![CDATA[
public class Foo {
	public void bar() {
		try {
			// Here do some stuff
		} catch( Exception e) {
			// Handling the issue
		} finally {
			// is this really a good idea ?
			throw new Exception();
		}
	}
}
	    	]]>
		</example>
	</rule>

	<rule name="AvoidThrowingNewInstanceOfSameException"
    since="4.2.5" language="java"
    message="A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided"
    externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strictexception.html#AvoidThrowingNewInstanceOfSameException"
    class="net.sourceforge.pmd.lang.rule.XPathRule">
		<description>
Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to
code size and runtime complexity.
		</description>
		<priority>7</priority>
		<properties>
			<property name="xpath">
				<value>
					<![CDATA[
//CatchStatement[
  count(Block/BlockStatement/Statement) = 1
  and
  FormalParameter/Type/ReferenceType/ClassOrInterfaceType/@Image = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType/@Image
  and
  count(Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression) = 1
  and
  FormalParameter/VariableDeclaratorId = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
  ]
 ]]>
				</value>
			</property>
		</properties>    
		<example>  <![CDATA[
public void bar() {
      try {
       // do something
      }  catch (SomeException se) {
         // harmless comment      
           throw new SomeException(se);
      }
}
  ]]>
		</example>
	</rule>

</ruleset>
