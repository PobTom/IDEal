<?xml version="1.0"?>

<ruleset name="Strings"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
	<description>
This ruleset checks for common mistakes with Strings.
	</description>
	
	    <rule name="AvoidDuplicateLiterals"
    	  since="1.0"
        message="The String literal {0} appears {1} times in this file; the first occurrence is on line {2}"
        class="net.sourceforge.pmd.lang.java.rule.strings.AvoidDuplicateLiteralsRule"
        externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strings.html#AvoidDuplicateLiterals">
    <description>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    </description>
        <priority>7</priority>
    <example>
<![CDATA[
private void bar() {
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
 }
 private void buz(String x) {}
]]>
    </example>
  </rule>

    <rule name="StringInstantiation"
    	  since="1.0"
        message="Avoid instantiating String objects; this is usually unnecessary."
        class="net.sourceforge.pmd.lang.java.rule.strings.StringInstantiationRule"
        externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strings.html#StringInstantiation">
    <description>
Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.
    </description>
       <priority>7</priority>
    <example>
<![CDATA[
private String bar = new String("bar"); // just do a String bar = "bar";
]]>
    </example>
    </rule>

   <rule name="StringToString"
   	  since="1.0"
        message="Avoid calling toString() on String objects; this is unnecessary."
        class="net.sourceforge.pmd.lang.java.rule.strings.StringToStringRule"
        externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strings.html#StringToString">
    <description>
Avoid calling toString() on objects already known to be string instances; this is unnecessary.
    </description>
       <priority>8</priority>
    <example>
<![CDATA[
private String baz() {
    String bar = "howdy";
    return bar.toString();
}
]]>
    </example>
    </rule>
	
	   <rule name="UseStringBufferLength"
          since="3.4"
          message="This is an inefficient use of StringBuffer.toString; call StringBuffer.length instead."
          class="net.sourceforge.pmd.lang.java.rule.strings.UseStringBufferLengthRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strings.html#UseStringBufferLength">
      <description>
Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals("")
or StringBuffer.toString().length() == ...
      </description>
      <priority>7</priority>
      <example>
  <![CDATA[
StringBuffer sb = new StringBuffer();
    
if (sb.toString().equals("")) {}	    // inefficient 
    
if (sb.length() == 0) {}	    		// preferred
  ]]>
      </example>
    </rule>
	
	    <rule name="UseIndexOfChar"
        since="3.5"
        message="String.indexOf(char) is faster than String.indexOf(String)."
        class="net.sourceforge.pmd.lang.java.rule.strings.UseIndexOfCharRule"
        externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strings.html#UseIndexOfChar">
    <description>
Use String.indexOf(char) when checking for the index of a single character; it executes faster.
    </description>
       <priority>8</priority>
    <example>
<![CDATA[
String s = "hello world";
  // avoid this
if (s.indexOf("d") {}
  // instead do this
if (s.indexOf('d') {}
]]>
    </example>
    </rule>
	
	<rule   name="UseEqualsToCompareStrings"
   		language="java"
        since="4.1"
        message="Use equals() to compare strings instead of ''=='' or ''!=''"
        class="net.sourceforge.pmd.lang.rule.XPathRule"
        externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/strings.html#UseEqualsToCompareStrings">
    <description>
Using '==' or '!=' to compare strings only works if intern version is used on both sides.
Use the equals() method instead.
    </description>
    <priority>9</priority>
    <properties>
        <property name="xpath">
            <value>
<![CDATA[
//EqualityExpression/PrimaryExpression
[(PrimaryPrefix/Literal
   [starts-with(@Image, '"')]
   [ends-with(@Image, '"')]
and count(PrimarySuffix) = 0)]
]]>
            </value>
        </property>
    </properties>
    <example>
<![CDATA[
public boolean test(String s) {
    if (s == "one") return true; 		// unreliable
    if ("two".equals(s)) return true; 	// better
    return false;
}
]]>
    </example>
    </rule>
	
	
</ruleset>
