<?xml version="1.0"?>

<ruleset name="Methods"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
	<description>
A ruleset for checking methods, including complexity and naming.	</description>

<!-- REMOVED FOR ISO CW4
	<rule name="NPathComplexity"
      since="3.9"
      message="The method {0}() has an NPath complexity of {1}"
      class="net.sourceforge.pmd.lang.java.rule.codesize.NPathComplexityRule"
      externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/codesize.html#NPathComplexity">
		<description>
The NPath complexity of a method is the number of acyclic execution paths through that method.
A threshold of 200 is generally considered the point where measures should be taken to reduce 
complexity and increase readability.
		</description>
		<priority>8</priority>
		<example>
			<![CDATA[
void bar() {	// this is something more complex than it needs to be,
	if (y) {	// it should be broken down into smaller methods or functions
		for (j = 0; j < m; j++) {
			if (j > r) {
				doSomething();
				while (f < 5 ) {
					anotherThing();
					f -= 27;
					}
				} else {
					tryThis();
				}
			}
		}
		if ( r - n > 45) {
		   while (doMagic()) {
		      findRabbits();
		   }
		}
		try {
			doSomethingDangerous();
		} catch (Exception ex) {
			makeAmends();
			} finally {
				dontDoItAgain();
				}
	}
}

 ]]>
		</example>
	</rule>
	-->
<!--
		<rule name="UnusedPrivateMethod"
        language="java"
        since="0.7"
        message="Avoid unused private methods such as ''{0}''."
        class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateMethodRule"
        externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/unusedcode.html#UnusedPrivateMethod">
		<description>
Unused Private Method detects when a private method is declared but is unused.
		</description>
		<priority>7</priority>
		<example>
			<![CDATA[
public class Something {
	private void foo() {} // unused
}
]]>
		</example>
	</rule>
	-->
	
	<rule name="ExcessiveMethodLength"
 		 since="0.6"
       message="Avoid really long methods."
       class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveMethodLengthRule"
       externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/codesize.html#ExcessiveMethodLength">
		<description>
When methods are excessively long this usually indicates that the method is doing more than its
name/signature might suggest. They also become challenging for others to digest since excessive 
scrolling causes readers to lose focus.
Try to reduce the method length by creating helper methods and removing any copy/pasted code.
		</description>
		<priority>9</priority>
		<example>
			<![CDATA[
public void doSomething() {
	System.out.println("Hello world!");
	System.out.println("Hello world!");
		// 98 copies omitted for brevity.
}

]]>
		</example>

	</rule>


	<rule name="ExcessiveParameterList"
 		 since="0.9"
       message="Avoid long parameter lists."
       class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveParameterListRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/codesize.html#ExcessiveParameterList">
		<description>
Methods with numerous parameters are a challenge to maintain, especially if most of them share the
same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.
		</description>
		<priority>8</priority>
		<example>
			<![CDATA[
public void addPerson(		// too many arguments liable to be mixed up
	int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {

	. . . .
}
 
public void addPerson(		// preferred approach
	Date birthdate, BodyMeasurements measurements, int ssn) {

	. . . .
}
]]>
		</example>

	</rule>


	<rule name="ExcessiveClassLength"
 		 since="0.6"
       message="Avoid really long classes."
       class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveClassLengthRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/codesize.html#ExcessiveClassLength">
		<description>
Excessive class file lengths are usually indications that the class may be burdened with excessive 
responsibilities that could be provided by external classes or functions. In breaking these methods
apart the code becomes more managable and ripe for reuse.
		</description>
		<priority>7</priority>
		<example>
			<![CDATA[
public class Foo {
	public void bar1() {
    // 1000 lines of code
	}
	public void bar2() {
    // 1000 lines of code
	}
    public void bar3() {
    // 1000 lines of code
	}
	
	
    public void barN() {
    // 1000 lines of code
	}
}
]]>
		</example>
	</rule>

<!-- ISO 4 
	<rule 	name="CyclomaticComplexity"
    			since="1.03"
      		message = "The {0} ''{1}'' has a Cyclomatic Complexity of {2}."
	      	class="net.sourceforge.pmd.lang.java.rule.codesize.CyclomaticComplexityRule"
	      	externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/codesize.html#CyclomaticComplexity">
		<description>
			<![CDATA[
Complexity directly affects maintenance costs is determined by the number of decision points in a method 
plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  
Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity.
		]]>
		</description>
		<priority>9</priority>
		<example>
			<![CDATA[
public class Foo {		// This has a Cyclomatic Complexity = 12
1   public void example()  {
2       if (a == b)  {
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n < h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}
]]>
		</example>
	</rule>
-->

<rule name="SimplifyBooleanReturns"
  		  since="0.9"
        message="Avoid unnecessary if..then..else statements when returning booleans"
        class="net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/design.html#SimplifyBooleanReturns">
	<description>
Avoid unnecessary if-then-else statements when returning a boolean. The result of
the conditional test can be returned instead.
	</description>
	<priority>8</priority>
	<example>
		<![CDATA[
public boolean isBarEqualTo(int x) {
   
	if (bar == x) {		 // this bit of code...
		return true;
	} else {
		return false;
    }
}

public boolean isBarEqualTo(int x) {

   	return bar == x;	// can be replaced with this
}
]]>
	</example>
</rule>

<rule name="AvoidReassigningParameters"
    	  since="1.0"
        message="Avoid reassigning parameters such as ''{0}''"
        class="net.sourceforge.pmd.lang.java.rule.design.AvoidReassigningParametersRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/design.html#AvoidReassigningParameters">
	<description>
Reassigning values to incoming parameters is not recommended.  Use temporary local variables instead.
	</description>
	<priority>8</priority>
	<example>
		<![CDATA[
public class Foo {
  private void foo(String bar) {
    bar = "something else";
  }
}
]]>
	</example>
</rule>

<rule name="UnnecessaryLocalBeforeReturn"
          since="3.3"
          message="Consider simply returning the value vs storing it in local variable ''{0}''"
          class="net.sourceforge.pmd.lang.java.rule.design.UnnecessaryLocalBeforeReturnRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/design.html#UnnecessaryLocalBeforeReturn">
	<description>
Avoid the creation of unnecessary local variables
	</description>
	<priority>7</priority>
	<example>
		<![CDATA[
public class Foo {
   public int foo() {
     int x = doSomething();
     return x;  // instead, just 'return doSomething();'
   }
}
  ]]>
	</example>
</rule>


<rule name="MethodNamingConventions"
    			  since="1.2"
              message="Method name does not begin with a lower case character."
              class="net.sourceforge.pmd.lang.java.rule.naming.MethodNamingConventionsRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/naming.html#MethodNamingConventions">
	<description>
Method names should always begin with a lower case character, and should not contain underscores.
	</description>
	<priority>9</priority>
	<example>
		<![CDATA[
public class Foo {
	public void fooStuff() {
	}
}
]]>
	</example>
</rule>

<!--<rule name="LocalVariableCouldBeFinal"
    	 since="2.2"
	    message="Local variable ''{0}'' could be declared final"
          class="net.sourceforge.pmd.lang.java.rule.optimizations.LocalVariableCouldBeFinalRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/optimizations.html#LocalVariableCouldBeFinal">
	<description>
A local variable assigned only once can be declared final.
	</description>
	<priority>6</priority>
	<example>
		<![CDATA[
public class Bar {
	public void foo () {
		String txtA = "a"; 		// if txtA will not be assigned again it is better to do this:
		final String txtB = "b";
	}
}
  ]]>
	</example>
</rule>
-->

<rule name="UnnecessaryReturn"
    		 since="1.3"
          message="Avoid unnecessary return statements"
          class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryReturnRule"
          externalInfoUrl="http://pmd.sourceforge.net/pmd-5.1.1/rules/java/unnecessary.html#UnnecessaryReturn">
	<description>
Avoid the use of unnecessary return statements.
	</description>
	<priority>7</priority>
	<example>
		<![CDATA[
public class Foo {
  public void bar() {
    int x = 42;
    return;
  }
}
		]]>
	</example>
</rule>



</ruleset>
